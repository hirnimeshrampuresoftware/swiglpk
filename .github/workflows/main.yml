name: Build

on: [push]
    
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # windows is tested on azure for now
        os: [ubuntu-20.04, windows-2019, macos-10.15]
        arch: [x86_64]
        include:
          - os: ubuntu-20.04
            arch: aarch64
    steps:
      - uses: actions/checkout@v2

      - name: Install SWIG
        if: runner.os == 'Windows'
        run: choco install swig -f -y

      - name: Set up QEMU
        if: ${{ matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v1
        
      - uses: actions/cache@v2
        id: deps-cache
        with:
          path: swiglpk_build
          key: ${{ runner.os }}-${{ matrix.arch }}-deps-cache-${{ hashFiles('**/config.sh') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-deps-cache
      - name: Build dependencies
        if: ${{ steps.deps-cache.outputs.cache-hit != 'true' }}
        run: |
          rm -rf swiglpk_build
          docker run --rm -v `pwd`:/root:rw --workdir=/root \
           quay.io/pypa/manylinux2014_${{ matrix.arch }} bash -ec 'yum install -y python3 python3-pip &&
                                            source config.sh && pre_build'

      - name: Get versions
        id: version
        run: |
          python -m pip install requests
          echo "::set-output name=glpk_version::$(python scripts/find_newest_glpk_release.py)"
          echo "::set-output name=swigplk_version::$(python scripts/find_swiglpk_version.py)"

      - name: Build wheels
        uses: joerick/cibuildwheel@v2.3.1
        env:
          NEW_GLPK_VERSION: ${{ steps.version.outputs.glpk_version }}
          GLPK_HEADER_PATH: glpk-${{ steps.version.outputs.glpk_version }}/src
          CIBW_ENVIRONMENT_LINUX: "GLPK_HEADER_PATH=$HOME/swiglpk_build LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/swiglpk_build/lib"
          # install swig before build in each python environment
          # each job runs a python environment so this is equivalent to CIBW_BEFORE_ALL
          CIBW_BEFORE_ALL_LINUX: >
                mv `pwd`/swiglpk_build $HOME &&
                yum install -y pcre-devel gmp-devel
          CIBW_BEFORE_BUILD_MACOS: source {project}/config.sh && IS_OSX=true pre_build
          CIBW_BEFORE_BUILD_WINDOWS: rm -rf glpk_build && python scripts/build_glpk.py
          CIBW_ARCHS_MACOS: "x86_64"  # GLPK will not compile on silicon
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_SKIP: pp*-win* *-musllinux* cp36-*_aarch64
          # install before tests
          CIBW_TEST_COMMAND: cp {project}/test_swiglpk.py . && python test_swiglpk.py

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  deploy:
    name: Release to Github and deploy to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Get versions
      id: version
      run: |
        echo "::set-output name=glpk_version::$(python scripts/find_newest_glpk_release.py)"
        echo "::set-output name=swigplk_version::$(python scripts/find_swiglpk_version.py)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install twine
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: wheelhouse

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run:
        twine upload --skip-existing --non-interactive ./wheelhouse/*
    - name: Create GitHub release
      uses: actions/create-release@v1
      if: steps.version.outputs.glpk_version != steps.version.outputs.swigplk_version
      env:
        # This token is set by gh actions
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "Release of version ${{ steps.version.glpk_version }}"
        draft: false
        prerelease: false

